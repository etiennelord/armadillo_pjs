/**
 * Bigger object
 */
public class workflow_object_output_database extends workflow_object_output {

      public workflow_object_output_database (workflow_properties _properties, int x, int y) {  
         properties=_properties;
         Vertex=new pvertex[4];
         connection=new workflow_connector[2];
         //--Object width and height (to do load from bitmap/properties?)
         int x2=x;
         int y2=y;
         float w=159;
         float h=33;
         // -- Make the vertex needed
         addVertex(x2, y2);
         addVertex(x2+w,y2);
         addVertex(x2+w,y2+h);
         addVertex(x2, y2+h);
         // -Create the connector
         for (int i=0; i<connection.length;i++) {
           connection[i]=new workflow_connector(this);
         }
         recalculatePosition();

    }


 public void drawFeature(){
   //--Draw the object on screen?
   if (properties.getBoolean("NoDraw")) return;
   //--Load information

   //--Load the flag
   boolean inside=inside2();

   //--Actual draw
   strokeWeight(0.1f);
    noStroke();
    noFill();

    //beginShape(QUADS);
    //for(int i=0;i<Vertex_count;i++){
    //  vertex(Vertex[i].x,Vertex[i].y);
    //}
    //endShape();

    PImage displayImage=null;
     if (inside2()||selected) {
        displayImage=(PImage)filedata.get("big_black.png");
    } else if (properties.get("Description").equals("Undefined")) {
        displayImage=(PImage)filedata.get("big_blue.png");
    } else if (properties.get("Description").equals("For each")) {
        displayImage=(PImage)filedata.get("big_green.png");		
    } else if (properties.get("Description").equals("Aggregate")) {
        displayImage=(PImage)filedata.get("big_green.png");		
    }
    else {
              if (properties.get("colorMode").equals("RED")) displayImage=(PImage)filedata.get("big_red.png");
              if (properties.get("colorMode").equals("BLUE"))displayImage=(PImage)filedata.get("big_blue.png");
              if (properties.get("colorMode").equals("ORANGE"))displayImage=(PImage)filedata.get("big_orange.png");
              if (properties.get("colorMode").equals("GREEN"))displayImage=(PImage)filedata.get("big_green.png");
              if (displayImage==null) displayImage=(PImage)filedata.get("big_red.png");
    }
    if (displayImage!=null) image(displayImage,this.x-(displayImage.width/2), this.y-2);
	
	if (properties.isSet("highlight")) {
		if (test!=second()) {
			if (test%2==0) {
					displayImage=(PImage)filedata.get("big_red.png");
			}
			test=second();
			int highlight=properties.getInt("highlight")-1;
			if (highlight>0) {
				properties.put("highlight",highlight);
			} else {
				properties.remove("highlight");
			}
		}
    }
	
	
    // - draw connector
    for (int i=0; i<connection.length;i++) {
       connection[i].drawFeature();
    }
    // - draw text
    fill(0);
    textAlign(CENTER);
    textFont(font);
    String name=properties.getName();
    String name1=properties.getDescription();
    //Clip name
    name1=(name1.length()>30?name1.substring(0, 30)+"...":name1);
    text(name, (Vertex[1].x-Vertex[0].x)/2+Vertex[0].x, (Vertex[2].y-Vertex[0].y)/2+Vertex[0].y-5);
    textFont(smallfont);
    text(name1, (Vertex[1].x-Vertex[0].x)/2+Vertex[0].x, (Vertex[2].y-Vertex[0].y)/2+Vertex[0].y+8);
    fill(128);
    textFont(font);
    if ( properties.isSet("AggregateObjectID")) {
		//--Add paralel information here		
					noFill();
					strokeWeight(2.0f);
					stroke(128);
					strokeCap(ROUND);
					rect(this.x-100, this.y-25, 200, 75);		
					strokeWeight(0.1f);
					fill(0);
					textAlign(CENTER);
					textFont(boldfont);
					text("Parallel section (Aggregate)",this.x,this.y-10);
					textFont(font);
					fill(0);				
	
	} else
	if (properties.isSet("ForObjectID")) {
                 int count=0;                 
				 for (Object key:properties.keySetproperties()) {                    			
					 String[] m = match(key, "For_(.*)");
					 if (m!=null) count++;
                  }
					description="For each for "+count+" "+type;
				 //--Add paralel information here		
					noFill();
					strokeWeight(2.0f);
					stroke(128);
					strokeCap(ROUND);
					rect(this.x-100, this.y-25, 200, 75);		
					strokeWeight(0.1f);
					fill(0);
					textAlign(CENTER);
					textFont(boldfont);
					text("Parallel section ("+count+" repetition)",this.x,this.y-10);
					textFont(font);
					fill(0);					
	  }
    //--Detect object over
    if (inside) {
        if (time_over==0) {
            time_over=millis();
        }
    } else {
        time_over=0;
        description="";
    }
    if (description.equals("")) {
        String type=properties.get("outputType");
         int type_id=properties.getInt("output_"+type.toLowerCase()+"_id");
         //Output out=new Output();
         //out.setType(type);
         if (type_id==0) {
             //description="Undefined";  
			 description="Choose data!";  
             //--Handle For loop here...
         } else {
            //description= out.getBiologic().getNameId(type_id);
             if (properties.isSet("Description")) description=properties.get("Description");
         }
    }
     if (inside&&description.length()>0&&(millis()-time_over)>10) {
        fill(0);
        textFont(font);
        float w = textWidth(description) + 10;
        float h = textAscent() + textDescent() + 4;
        fill (0xff79D1F0);
        stroke(255);
        rectMode(CORNER);
        rect (mouseX-w/2, mouseY - h/2, w, h);
        fill(0);
        textAlign(CENTER, CENTER);
        text(description,mouseX,mouseY);
    }
  }

  public void drawFeature_buffer(PGraphics buffers){
   //--Draw the object on screen?
   if (properties.getBoolean("NoDraw")) return;
   //--Load information


   //--Load the flag
   boolean inside=inside2();

   //--Actual draw
   buffers.strokeWeight(0.1f);
   buffers.noStroke();
   buffers.noFill();

    PImage displayImage=null;
     if (inside2()||selected) {
        displayImage=(PImage)filedata.get("big_black.png");
    } else if (properties.get("Description").equals("Undefined")) {
        displayImage=(PImage)filedata.get("big_blue.png");
    } else if (properties.get("Description").equals("For each")) {
        displayImage=(PImage)filedata.get("big_green.png");		
    } else if (properties.get("Description").equals("Aggregate")) {
        displayImage=(PImage)filedata.get("big_green.png");		
    }
    else {
              if (properties.get("colorMode").equals("RED")) displayImage=(PImage)filedata.get("big_red.png");
              if (properties.get("colorMode").equals("BLUE"))displayImage=(PImage)filedata.get("big_blue.png");
              if (properties.get("colorMode").equals("ORANGE"))displayImage=(PImage)filedata.get("big_orange.png");
              if (properties.get("colorMode").equals("GREEN"))displayImage=(PImage)filedata.get("big_green.png");
              if (displayImage==null) displayImage=(PImage)filedata.get("big_red.png");
    }
    if (displayImage!=null) buffers.image(displayImage,this.x-(displayImage.width/2), this.y-2);
	
	if (properties.isSet("highlight")) {
		if (test!=second()) {
			if (test%2==0) {
					displayImage=(PImage)filedata.get("big_red.png");
			}
			test=second();
			int highlight=properties.getInt("highlight")-1;
			if (highlight>0) {
				properties.put("highlight",highlight);
			} else {
				properties.remove("highlight");
			}
		}
    }
	
	
    // - draw connector
    for (int i=0; i<connection.length;i++) {
       connection[i].drawFeature_buffer(buffers);
    }
    // - draw text
   buffers.fill(0);
    buffers.textAlign(CENTER);
    buffers.textFont(font);
    String name=properties.getName();	
	if (name.equals("MultipleSequences")) name="Sequences";
    String name1=properties.getDescription();
	if (name1.equals("Undefined")) {
		buffers.image((PImage)filedata.get("ifSIDE_warning.png"),this.x-80, this.y-8);
		name1="No data";
	}
    //Clip name
    name1=(name1.length()>30?name1.substring(0, 30)+"...":name1);
    buffers.text(name, (Vertex[1].x-Vertex[0].x)/2+Vertex[0].x, (Vertex[2].y-Vertex[0].y)/2+Vertex[0].y-5);
    buffers.textFont(smallfont);
    buffers.text(name1, (Vertex[1].x-Vertex[0].x)/2+Vertex[0].x, (Vertex[2].y-Vertex[0].y)/2+Vertex[0].y+8);    
	buffers.fill(128);
    buffers.textFont(font);
    if ( properties.isSet("AggregateObjectID")) {
		//--Add paralel information here		
					buffers.noFill();
					buffers.strokeWeight(2.0f);
					buffers.stroke(128);
					buffers.strokeCap(ROUND);
					buffers.rect(this.x-100, this.y-25, 200, 75);		
					buffers.strokeWeight(0.1f);
					buffers.fill(0);
					buffers.textAlign(CENTER);
					buffers.textFont(boldfont);
					buffers.text("Parallel section (Aggregate)",this.x,this.y-10);
					buffers.textFont(font);
					buffers.fill(0);				
	
	} else
	if (properties.isSet("ForObjectID")) {
                 int count=0;                 
				 for (Object key:properties.keySetproperties()) {                    			
					 String[] m = match(key, "For_(.*)");
					 if (m!=null) count++;
                  }
					description="For each for "+count+" "+type;
				 //--Add paralel information here		
					buffers.noFill();
					buffers.strokeWeight(2.0f);
					buffers.stroke(128);
					buffers.strokeCap(ROUND);
					buffers.rect(this.x-100, this.y-25, 200, 75);		
					buffers.strokeWeight(0.1f);
					buffers.fill(0);
					buffers.textAlign(CENTER);
					buffers.textFont(boldfont);
					buffers.text("Parallel section ("+count+" repetition)",this.x,this.y-10);
					buffers.textFont(font);
					buffers.fill(0);					
	  }
    //--Detect object over
    if (inside) {
        if (time_over==0) {
            time_over=millis();
        }
    } else {
        time_over=0;
        description="";
    }
	
    if (description.equals("")) {
        String type=properties.get("outputType");
         int type_id=properties.getInt("output_"+type.toLowerCase()+"_id");
         //Output out=new Output();
         //out.setType(type);
         if (type_id==0) {
             
			  description="Undefined";  
			 //description="Choose data!";  
             //--Handle For loop here...
         } else {
            //description= out.getBiologic().getNameId(type_id);
             if (properties.isSet("Description")) description=properties.get("Description");
			 
			 
         }
    }
	//--Etienne Lord, 2013 -> Don't draw description here
     // if (inside&&description.length()>0&&(millis()-time_over)>1000) {
        // buffers.fill(0);
        // buffers.textFont(font);
        // float w = textWidth(description) + 10;
        // float h = textAscent() + textDescent() + 4;
        // buffers.fill (0xff79D1F0);
        // buffers.stroke(255);
        // buffers.rectMode(CORNER);
        // buffers.rect (mouseX-w/2, mouseY - h/2, w, h);
        // buffers.fill(0);
        // buffers.textAlign(CENTER, CENTER);
        // buffers.text(description,mouseX,mouseY);
    // }
  }
  
 /**
   * Calculate object_connector location
   */
  public void recalculatePosition() {
      properties.put("x", Vertex[0].x); //Thit is the left-top corner
      properties.put("y", Vertex[0].y);
      this.x=parseInt(Vertex[0].x+(Vertex[1].x-Vertex[0].x)/2);
      this.y=parseInt(Vertex[0].y+(Vertex[1].y-Vertex[0].y)/2);
      //-- Initialise Connector

    for (int i=0; i<connection.length; i++) {
       connection[i].parent=this;
       switch(i) {
         case Output_LEFT : updateConnector(connection[i], i, this.x-88, this.y+10, null);
                    break;
         case Output_RIGHT: updateConnector(connection[i], i, this.x+79, this.y+10, null);
                    break;
       }
    }
    }
}