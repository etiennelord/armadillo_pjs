public class workflow_object_aggregator extends workflow_object {
  public int x1,y1,x2,y2;
  int w=0;
  int h=0;
  int min_w=100;
  int min_h=100;
  public workflow_drag_connector[] drag; //Drag connector for redimension

  /**
 *
 * @param name
 * @param x
 * @param y
 * @param w
 * @param h
 */
 public workflow_object_aggregator(workflow_properties obj, int x, int y, int w, int h) { 
   this.properties=obj;
   this.resetColorMode();
   this.x1=x;
   this.y1=y;
   this.w=w;
   this.h=h;
   this.resetColorMode();
   drag = new workflow_drag_connector[2]; //Drag connector for redimension
   connection=new workflow_connector[4];  //Connector
   // --Initialise connector and drag
   for (int i=0; i<connection.length;i++) {
     connection[i]=new workflow_connector(this);
    }
   for (int i=0; i<drag.length;i++) {
     drag[i]=new workflow_drag_connector();
     drag[i].parent=this;
   }

    min_w=(int) (textWidth(properties.getName()+" ( "+properties.getDescription()+" )") + 20);
    min_h=20;
    update(this.x1+this.w, this.y1+this.h);
 }

 /**
 *
 * @param name
 * @param x
 * @param y
 * @param w
 * @param h
 */
 public workflow_object_aggregator(workflow_properties obj, int x, int y) {
   properties=obj;
   resetColorMode();
   this.x1=x;
   this.y1=y;
   this.x2=properties.getInt("x2");
   this.y2=properties.getInt("y2");
   if (this.x2-this.x1<100) this.x2=this.x1+100;
   if (this.y2-this.y1<100) this.y2=this.y1+100;
   this.w=abs(x2-x1);
   this.h=abs(y2-y1);
   this.resetColorMode();
   drag = new workflow_drag_connector[2]; //Drag connector for redimension
   connection=new workflow_connector[4];  //Connector
   // --Initialise connector and drag
   for (int i=0; i<connection.length;i++) {
     connection[i]=new workflow_connector(this);
    }
   for (int i=0; i<drag.length;i++) {
     drag[i]=new workflow_drag_connector();
     drag[i].parent=this;
   }

   if (initialized) min_w=(int) (textWidth(properties.getName()+" ( "+properties.getDescription()+" )") + 20);
    min_h=20;
    update(this.x1+this.w, this.y1+this.h);
 }

 public void update(int x2, int y2) {
     this.x2=x2;
     this.y2=y2;
     this.w=abs(this.x2-this.x1);
     this.h=abs(this.y2-this.y1);

     if (w<min_w) {
         this.x2=x1+min_w;
         this.w=min_w;
         //String s=String.format("x1 %d, y1 %d, x2 %d, y2 %d, w %d, h %d", x1,y1,this.x2,this.y2,w,h);
         //Config.log(s);
     }
     if (h<min_h) {
         this.y2=y1+min_h;
         this.h=min_h;
     }
    for (int i=0; i<connection.length;i++) {
       switch(i) {
         case UP   : updateConnector(connection[i], i, x1+w/2-5, y1-14, null);
                     //connection[i].x=x1+w/2-5;connection[i].y=y1-14;
                     break;
         case DOWN : updateConnector(connection[i], i, x1+w/2-5, y2+5, null);
                     //connection[i].x=x1+w/2-5;connection[i].y=this.y2+5;
                     break;
         case LEFT : updateConnector(connection[i], i, x1-14,y1+h/2-5, null);
                     //connection[i].x=x1-14;connection[i].y=y1+h/2-5;
                     break;
         case RIGHT: updateConnector(connection[i], i, x2+5,y1+h/2-5, null);
                     //connection[i].x=this.x2+5;connection[i].y=y1+h/2-5;
                     break;
     }
   }

   for (int i=0; i<drag.length;i++) {
       switch(i) {
         //case UPLEFT:   drag[i].x=x1-14; drag[i].y=y1-10;
         //               break;
         case UPRIGHT:  drag[i].x=this.x2+5; drag[i].y=y1-10;
                        drag[i].mode=workflow_drag_connector.UPRIGHT;
                        break;
         //case DOWNLEFT: drag[i].x=x1-14; drag[i].y=y2;
         //               break;
         case DOWNRIGHT:drag[i].x=this.x2+5; drag[i].y=y2;
                        drag[i].mode=workflow_drag_connector.DOWNRIGHT;
                        break;
     }
    } //End for drag
     properties.put("x", x1); //Thit is the left-top corner
     properties.put("y", y1);
     properties.put("x2", x2); //Thit is the right-bottom corner
     properties.put("y2", y2);

} //End update


 public void drawFeature() {
 
  //-- Debug draw box and text
    if (inside2()||selected) {
     drawBox(x1,y1,x2,y2, 220);
    } else drawBox(x1,y1,x2,y2, color(189,212,240));

    // --Draw connector
   for (int i=0; i<connection.length;i++) {
       connection[i].drawFeature();
    }

  // --Draw drag
    for (int i=0; i<drag.length;i++) {
        drag[i].draw();
    }
 
      //--For small_preview editor
    if (config.get("displayConnector").equals("True")) { 
        fill(0);
        for (int i=0; i<connection.length;i++) {
         switch(i) {
            case UP:   text(str(i),connection[i].x-5, connection[i].y+5); break;
            case DOWN: text(str(i),connection[i].x-5, connection[i].y+15); break;
            case LEFT: text(str(i),connection[i].x-5, connection[i].y+5); break;
            case RIGHT:text(str(i),connection[i].x+15, connection[i].y+5); break;
            }
        }
    }


 }

 void drawBox(int x1, int y1, int x2, int y2, int target_color) {
       //Default color
       fill(target_color);
       stroke(target_color);
       rect(x1,y1-5, w, h+10);
       rect(x1-5,y1,w+10,h);
       ellipse(x1,y1,10,10);
       ellipse(x1,y1+h,10,10);
       ellipse(x1+w,y1+h,10,10);
       ellipse(x1+w,y1,10,10);    
       fill(0);
       textAlign(LEFT);
       textFont(font);
       text(properties.getName()+" ( "+properties.getDescription()+" )", x1, y1+7);
       //textFont(font);
}


  public boolean inside2() {
       return (inside2(mouseX, mouseY));
    }


 public boolean inside2(int x, int y) {
 //--Note: the else case is to handle if the selected point is higher
   if (x1<x2&&y1<y2) {
      return (x > x1 && x < x2 && y > y1 && y < y2);
    } else return (x > x2 && x < x1 && y > y2 && y < y1);
 }

 public void featureTranslate(float x, float y) {
    this.x1+=x;
    this.y1+=y;
    this.x2+=x;
    this.y2+=y;
    properties.put("x", str(this.x1));
    properties.put("y", str(this.y1));
    properties.put("x2", str(this.x2));
    properties.put("y2", str(this.y2));

    // --Update connector and drag item
    for (int i=0; i<connection.length;i++) {
        connection[i].x+=x;
        connection[i].y+=y;
    }
    for (int i=0; i<drag.length;i++) {
        drag[i].x+=x;
        drag[i].y+=y;
    }
  }

} //End aggregator_object